using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using ThothShop.Domain.Enums;
using ThothShop.Domain.Models;

namespace ThothShop.Infrastructure.Configurations
{
    public class AuthorConfiguration : IEntityTypeConfiguration<Author>
    {
        public void Configure(EntityTypeBuilder<Author> builder)
        {
            // Configure table name
            builder.ToTable("Authors");

            // Configure primary key
            builder.HasKey(a => a.Id);
            // Configure ID to be generated by database on add
            builder.Property(c => c.Id)
                .ValueGeneratedOnAdd()
                .HasDefaultValueSql("NEWSEQUENTIALID()"); // For SQL Server

            // Configure properties
            builder.Property(a => a.Name)
                .IsRequired()
                .HasMaxLength(100);

            builder.Property(a => a.Bio)
                .HasMaxLength(1000);

            builder.Property(a => a.ViewCount)
                .HasDefaultValue(0);

            builder.Property(a => a.Gender)
                .IsRequired()
                .HasConversion<string>(); // Store enum as string in DB

            builder.Property(a => a.Nationality)
                .IsRequired()
                .HasConversion<string>(); // Store enum as string in DB

            builder.Property(a => a.DateOfBirth)
                .IsRequired()
                .HasColumnType("date"); // Use appropriate DB date type

            // Configure relationships
            builder.HasMany(a => a.bookAuthors)
                .WithOne(ba => ba.Author)
                .HasForeignKey(ba => ba.AuthorId)
                .OnDelete(DeleteBehavior.Cascade);
            builder.HasMany(a => a.AuthorImages)
                .WithOne(aIM => aIM.author)
                .HasForeignKey(ba => ba.AuthorId)
                .OnDelete(DeleteBehavior.Cascade);
            builder.HasMany(a => a.authorCategories)
                .WithOne(ac => ac.Author)
                .HasForeignKey(ac => ac.AuthorId)
                .OnDelete(DeleteBehavior.Cascade);

        }
    }
}